// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EventRegistered extends ethereum.Event {
  get params(): EventRegistered__Params {
    return new EventRegistered__Params(this);
  }
}

export class EventRegistered__Params {
  _event: EventRegistered;

  constructor(event: EventRegistered) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }

  get tags(): string {
    return this._event.parameters[2].value.toString();
  }

  get domain(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  register(name: string, description: string): Address {
    let result = super.call("register", "register(string,string):(address)", [
      ethereum.Value.fromString(name),
      ethereum.Value.fromString(description)
    ]);

    return result[0].toAddress();
  }

  try_register(
    name: string,
    description: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "register",
      "register(string,string):(address)",
      [ethereum.Value.fromString(name), ethereum.Value.fromString(description)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  filtersOf(event_: Address): Array<Address> {
    let result = super.call("filtersOf", "filtersOf(address):(address[])", [
      ethereum.Value.fromAddress(event_)
    ]);

    return result[0].toAddressArray();
  }

  try_filtersOf(event_: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("filtersOf", "filtersOf(address):(address[])", [
      ethereum.Value.fromAddress(event_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  passesOf(event_: Address, active: boolean): Array<Address> {
    let result = super.call("passesOf", "passesOf(address,bool):(address[])", [
      ethereum.Value.fromAddress(event_),
      ethereum.Value.fromBoolean(active)
    ]);

    return result[0].toAddressArray();
  }

  try_passesOf(
    event_: Address,
    active: boolean
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "passesOf",
      "passesOf(address,bool):(address[])",
      [ethereum.Value.fromAddress(event_), ethereum.Value.fromBoolean(active)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get event_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class PrepareCall extends ethereum.Call {
  get inputs(): PrepareCall__Inputs {
    return new PrepareCall__Inputs(this);
  }

  get outputs(): PrepareCall__Outputs {
    return new PrepareCall__Outputs(this);
  }
}

export class PrepareCall__Inputs {
  _call: PrepareCall;

  constructor(call: PrepareCall) {
    this._call = call;
  }
}

export class PrepareCall__Outputs {
  _call: PrepareCall;

  constructor(call: PrepareCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetFiltersCall extends ethereum.Call {
  get inputs(): SetFiltersCall__Inputs {
    return new SetFiltersCall__Inputs(this);
  }

  get outputs(): SetFiltersCall__Outputs {
    return new SetFiltersCall__Outputs(this);
  }
}

export class SetFiltersCall__Inputs {
  _call: SetFiltersCall;

  constructor(call: SetFiltersCall) {
    this._call = call;
  }

  get event_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newFilters(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetFiltersCall__Outputs {
  _call: SetFiltersCall;

  constructor(call: SetFiltersCall) {
    this._call = call;
  }
}

export class SetPassesCall extends ethereum.Call {
  get inputs(): SetPassesCall__Inputs {
    return new SetPassesCall__Inputs(this);
  }

  get outputs(): SetPassesCall__Outputs {
    return new SetPassesCall__Outputs(this);
  }
}

export class SetPassesCall__Inputs {
  _call: SetPassesCall;

  constructor(call: SetPassesCall) {
    this._call = call;
  }

  get event_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newPasses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetPassesCall__Outputs {
  _call: SetPassesCall;

  constructor(call: SetPassesCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
